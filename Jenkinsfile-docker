pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS_ID = 'dockerhub-credentials-id' // Reemplaza con el ID de las credenciales de DockerHub en Jenkins
        DOCKERHUB_REPO = 'tu-usuario/tu-repo' // Reemplaza con tu usuario y repo de DockerHub
        DOCKER_IMAGE_TAG = "v${env.BUILD_ID}" // Etiqueta de la imagen, usa el ID de build de Jenkins
    }

    stages {
        stage('Checkout') {
            steps {
                // Verifica el código fuente desde tu repositorio
                git 'https://github.com/tu-usuario/tu-repo.git' // Reemplaza con tu repositorio
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Construye la imagen de Docker
                    sh 'docker build -t ${DOCKERHUB_REPO}:${DOCKER_IMAGE_TAG} .'
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Inicia sesión en DockerHub
                    withCredentials([usernamePassword(credentialsId: env.DOCKERHUB_CREDENTIALS_ID, usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        sh 'echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin'

                        // Subir la imagen a DockerHub
                        sh 'docker push ${DOCKERHUB_REPO}:${DOCKER_IMAGE_TAG}'
                    }
                }
            }
        }
    }

    post {
        always {
            // Limpia las imágenes locales de Docker para evitar llenar el espacio del disco
            sh 'docker system prune -f'
        }
    }
}
